View(claimtbl2)
l <- unique(claimtbl2$lossdate)
library(MASS)
?Boston
?cut
rm(against, c, d, l)
rm(test,x,y,y2)
rm(right,Salaries,tots)
rm(alive,final,left,Master,part2)
library(ggplot2)
library(raw)
library(tree)
install.packages("tree")
library(tree)
library(randomForest)
data("RegionExperience")
str(RegionExperience)
data("Boston")
str(Boston)
t <- tree(medv~.,Boston)
plot(t, type="uniform")
text(t,pretty=5,col="blue",cex=0.8)
rm(RegionExperience)
plot(Boston)
rm(t)
rm(Boston)
set.seed(329)
#Create effective year variable
library(lubridate)
policytbl$py <- year(policytbl$policyeffdate)
#Explore distribution of policy limits
table(policytbl$limit, policytbl$py)
#Remove the three policies with limit of 1,500,000
policytbl <- policytbl[policytbl$limit!=1500000,]
#Filter policynum to unique values and randomly assign tranche number
policycount <- unique(policytbl$policynum)
npol <- length(policycount)
tranche <- ceiling(runif(npol, 0,3))
#Create mapping table for policynum-tranche
policynum <- policycount
trancheMap <- data.frame(policynum,tranche)
trancheMap$policynum <- as.character(trancheMap$policynum)
trancheMap$tranche <- as.factor(trancheMap$tranche)
#Assign tranche numbers to policytbl
library(dplyr)
policytbl2 <- full_join(policytbl,trancheMap,by="policynum")
table(policytbl2$tranche)
#Summarize claim data by policy key and join with policy data
claimtbl2 <- claimtbl[claimtbl$eval_dt==as.Date("2016-12-31"),]
claimtbl2 <- mutate(claimtbl2, incurred=paid+rsrv)
claimtbl3 <- claimtbl2 %>% group_by(lossdate) %>% summarise(incurred=sum(incurred),
clmcount=n())
View(claimtbl3)
high <- subset(claimtbl3, incurred>1000000)
View(high)
rm(claimtbl3)
claimtbl3 <- claimtbl2 %>% group_by(policykey,lossdate) %>% summarise(incurred=sum(incurred),clmcount=n())
claimtbl2$incurred <- min(claimtbl2$incurred,1000000)
summary(claimtbl2$incurred)
claimtbl2 <- claimtbl[claimtbl$eval_dt==as.Date("2016-12-31"),]
claimtbl2 <- mutate(claimtbl2, incurred=paid+rsrv)
claimtbl2$incurred <- min(claimtbl2$incurred,1000000)
summary(claimtbl2$incurred)
claimtbl2 <- claimtbl[claimtbl$eval_dt==as.Date("2016-12-31"),]
claimtbl2 <- mutate(claimtbl2, incurred=paid+rsrv)
summary(claimtbl2$incurred)
claimtbl2$incurred <- pmin(claimtbl2$incurred,1000000)
summary(claimtbl2$incurred)
test <- claimtbl2$incurred
claimtbl2 <- claimtbl[claimtbl$eval_dt==as.Date("2016-12-31"),]
claimtbl2 <- mutate(claimtbl2, incurred=paid+rsrv)
View(claimtbl2)
head(test)
claimtbl2$incurred <- pmin(claimtbl2$incurred,1000000)
claimtbl2$RLoss <- sapply(claimtbl2$incurred, function(x) median(c(0, x - 250000, 1000000 - 250000)))
claimSum <- claimtbl2 %>% group_by(policykey) %>% summarise(paid=sum(paid),
incurred=sum(incurred),RLoss=sum(RLoss))
claimSum$paid[is.na(claimSum$paid)] <- 0
View(claimSum)
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ExploratoryAnalysis.R', echo=TRUE)
rm(test)
rm(high)
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ExploratoryAnalysis.R', echo=TRUE)
high <- subset(total, incurred>1000000)
View(high)
high5 <- subset(total, limit=500000 && incurred>500000)
View(high5)
high5 <- subset(total, limit=5e+05 && incurred>500000)
high5 <- subset(total, limit==500000 && incurred>500000)
high5 <- subset(total, limit==5e+05 && incurred>500000)
high5 <- subset(total, limit==5e+05 & incurred>500000)
View(high5)
high5 <- subset(total, limit==500000 & incurred>500000)
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ExploratoryAnalysis.R', echo=TRUE)
rm(high, high5)
sum(policytbl_test$writtenpremium)
sum(claimtbl_test$incurred)
TER <- .1
IXL <- .1
RLC <- sum(claimtbl_test$RLoss/policytbl_test$exposure)
RLC <- sum(claimtbl_test$RLoss)/sum(policytbl_test$exposure)
RLC
RP <- RLC/((1-IXL)(1-TER))
RP <- RLC / ((1-IXL)(1-TER))
class(RLC)
class(TER)
RP <- RLC / ((1-IXL)*(1-TER))
RP
RP*policytbl_test$exposure
RP*sum(policytbl_test$exposure)
8.3/33
13.8/107.2
sum(policytbl_test$writtenpremium)
XOLcost <- RP*sum(policytbl_test$exposure)
XOLcost
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ExploratoryAnalysis.R', echo=TRUE)
XOLcost
load("/Users/Danny/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ReinsuranceCapstone 10.RData")
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ExploratoryAnalysis.R', echo=TRUE)
XOLcost
pmult <- policytbl2 %>% group_by(policykey) %>% summarize(n=n()) %>% filter(n>1)
pmult
View(pmult)
pmult <- policytbl2 %>% group_by(policykey) %>% summarize(n=n()) %>% filter(n>1)
policytbl2 <- policytbl2[!(policytbl2$policykey %>% pmult$policykey),]
policytbl2 <- policytbl2[!(policytbl2$policykey %in% pmult$policykey),]
set.seed(329)
#Create effective year variable
library(lubridate)
policytbl$py <- year(policytbl$policyeffdate)
#Explore distribution of policy limits
table(policytbl$limit, policytbl$py)
#Remove the three policies with limit of 1,500,000
policytbl <- policytbl[policytbl$limit!=1500000,]
#Filter policynum to unique values and randomly assign tranche number
policycount <- unique(policytbl$policynum)
npol <- length(policycount)
tranche <- ceiling(runif(npol, 0,3))
#Create mapping table for policynum-tranche
policynum <- policycount
trancheMap <- data.frame(policynum,tranche)
trancheMap$policynum <- as.character(trancheMap$policynum)
trancheMap$tranche <- as.factor(trancheMap$tranche)
#Assign tranche numbers to policytbl
library(dplyr)
policytbl2 <- full_join(policytbl,trancheMap,by="policynum")
table(policytbl2$tranche)
pmult <- policytbl2 %>% group_by(policykey) %>% summarize(n=n()) %>% filter(n>1)
policytbl2 <- policytbl2[!(policytbl2$policykey %in% pmult$policykey),]
#Summarize claim data by policy key
claimtbl2 <- claimtbl[claimtbl$eval_dt==as.Date("2016-12-31"),]
claimtbl2 <- mutate(claimtbl2, incurred=paid+rsrv)
claimtbl2$incurred <- pmin(claimtbl2$incurred,1000000)
claimtbl2$RLossXOL <- sapply(claimtbl2$incurred, function(x) median(c(0, x - 250000, 1000000 - 250000)))
claimSum <- claimtbl2 %>% group_by(policykey) %>% summarise(paid=sum(paid),
incurred=sum(incurred),RLossXOL=sum(RLossXOL))
claimSum$paid[is.na(claimSum$paid)] <- 0
#Premium and Claim data combined
total <- left_join(policytbl2,claimSum,by="policykey")
#Create test, train, and validate datasets
policytbl_test <- subset(policytbl2, tranche==1)
claimtbl_test <- claimSum[claimSum$policykey%in%policytbl_test$policykey,]
policytbl_train <- subset(policytbl2, tranche==2)
claimtbl_train <- claimSum[claimSum$policykey%in%policytbl_train$policykey,]
policytbl_validate <- subset(policytbl2, tranche==3)
claimtbl_validate <- claimSum[claimSum$policykey%in%policytbl_validate$policykey,]
#Calculate total premium and total loss from test set
sum(policytbl_test$writtenpremium)
sum(claimtbl_test$incurred)
#Price XOL cover for 750K x 250K
CR <- 0
BF <- 0
IXL <- .1
TER <- .1
RLC <- sum(claimtbl_test$RLossXOL)/sum(policytbl_test$exposure)
RP <- RLC / ((1-CR-BF)*(1-IXL)*(1-TER))
XOLcost <- RP*sum(policytbl_test$exposure)
#Price ASL Cover
#Remove unnecessary datasets
rm(npol, policycount, policynum, tranche, trancheMap)
rm(pmult)
summary(policytbl_test$py)
table(policytbl_test$py)
polclaim_test <- left_join(policytbl_test,claimtbl_test,by="policykey")
View(polclaim_test)
claimSum$paid[is.na(claimSum$paid)] <- 0
polclaim_test$paid[is.na(polclaim_test$paid)] <- 0
polclaim_test$incurred[is.na(polclaim_test$incurred)] <- 0
View(polclaim_test)
yearLR <- polclaim_test %>% group_by(py) %>% summarise(incurred=sum(incurred),
prem=sum(writtenpremium)) %>% mutate(LR=incurred/prem)
View(yearLR)
.4*5013107
5013107-2005243
.6*5013107
(.4648091-.4)*5013107
yearLR$asl <- ifelse(LR<=0.4,0,ifelse(LR<0.7,(LR-0.4)*incurred,0.3*incurred))
yearLR$asl <- with(yearLR, ifelse(LR<=0.4,0,ifelse(LR<0.7,(LR-0.4)*incurred,0.3*incurred)))
View(yearLR)
(.4648091-.4)*5120766
sum(yearLR$prem)
sum(policytbl_test$writtenpremium)
sum(claimtbl_test$incurred)
RLCxol <- sum(claimtbl_test$RLossXOL)/sum(policytbl_test$exposure)
RPxol <- RLC / ((1-CR-BF)*(1-IXL)*(1-TER))
XOLcost <- RP*sum(policytbl_test$exposure)
XOLcost
RLCxol <- sum(claimtbl_test$RLossXOL)/sum(policytbl_test$exposure)
RPxol <- RLCxol / ((1-CR-BF)*(1-IXL)*(1-TER))
XOLcost <- RPxol*sum(policytbl_test$exposure)
XOLcost
RLCasl <- sum(yearLR$asl)/sum(yearLR$prem)
RPasl <- RLCasl / ((1-CR-BF)*(1-IXL)*(1-TER))
ASLcost <- RPasl*sum(policytbl_test$exposure)
ASLcost
RLCasl <- sum(yearLR$asl)/sum(policytbl_test$exposure)
RPasl <- RLCasl / ((1-CR-BF)*(1-IXL)*(1-TER))
ASLcost <- RPasl*sum(policytbl_test$exposure)
ASLcost
names(polclaim)
names(polclaim_test)
yearLR <- polclaim_test %>% group_by(py) %>% summarise(incurred=sum(incurred),
prem=sum(writtenpremium),claim=sum(numclaims),exp=sum(exposure)) %>%
mutate(LR=incurred/prem)
View(yearLR)
yearLR <- polclaim_test %>% group_by(py) %>% summarise(incurred=sum(incurred),
prem=sum(writtenpremium),claim=sum(numclaims),exp=sum(exposure)) %>%
mutate(LR=incurred/prem,sev=incurred/claim,freq=claim/exp)
View(yearLR)
yearLR$asl <- with(yearLR, ifelse(LR<=0.4,0,ifelse(LR<0.7,(LR-0.4)*incurred,0.3*incurred)))
RLCasl <- sum(yearLR$asl)/sum(yearLR$exposure)
RPasl <- RLCasl / ((1-CR-BF)*(1-IXL)*(1-TER))
ASLcost <- RPasl*sum(policytbl_test$exposure)
RLCasl <- sum(yearLR$asl)/sum(yearLR$exp)
RPasl <- RLCasl / ((1-CR-BF)*(1-IXL)*(1-TER))
ASLcost <- RPasl*sum(yearLR$exp)
ASLcost
77472.13*102
pardata <- select(yearLR, c("sev","freq"))
View(pardata)
pardata <- pardata[1:7,]
View(pardata)
sev <- mean(pardata$sev)
lamda <- mean(pardata$freq)
sev
lamda
View(yearLR)
sum(yearXL[1:7,"incurred"])
sum(yearLR[1:7,"incurred"])
sum(yearLR[1:7,"claim"])
34340370/744
sd <- sd(pardata$sev)
sd
?sd
rpois
?rpois
rpois(lambda)
sev <- mean(pardata$sev)
sd <- sd(pardata$sev)
lambda <- mean(pardata$freq)
rpois(lambda)
rpois(lambda=lambda)
rpois(1,lambda)
rpois(1,lambda^-1)
View(yearLR)
pardata <- select(yearLR, c("exp","sev","freq"))
pardata <- pardata[1:7,]
rpois(mean(pardata$exp),lambda)
rpois(1,lambda)
View(yearLR)
rpois(1,100)
pardata <- select(yearLR, c("claim","exp","sev","freq"))
pardata <- pardata[1:7,]
lambda <- mean(pardata$claim)
lambda
rpois(1,lambda)
rpois(1,lambda)
rpois(1,lambda)
rpois(1,lambda)
rpois(1,lambda)
?rgamma
load("/Users/Danny/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/ReinsuranceCapstone 10.RData")
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/Tranche1.R', echo=TRUE)
#Filter data for years wanted
pardata <- select(yearLR, c("claim","exp","sev","freq"))
pardata <- pardata[1:7,]
#Calculate expected severity and standard deviation. Lambda too.
sev <- mean(pardata$sev)
sd <- sd(pardata$sev)
lambda <- mean(pardata$claim)
View(pardata)
plot(pardata$sev)
hist(pardata$sev)
?var
meanSev <- mean(pardata$sev)
varSev <- var(pardata$sev)
scale <- (varSev)/meanSev
shape <- meanSev/scale
lambda <- mean(pardata$claim)
meanSev
varSev
shape
scale
N <- 25000
TotalLossLoop <- numeric(N)
for (i in 1:N) {
claims <- rpois(1,lambda)
losses <- rgamma(claims,shape,scale)
TotalLossLoop <- sum(losses)
}
TotalLossLoop
for (i in 1:N) {
claims <- rpois(1,lambda)
losses <- rgamma(claims,shape,scale)
TotalLossLoop[i] <- sum(losses)
}
summary(TotalLossLoop)
claims <- rpois(1,lambda)
claims
varSev
vsrSev^1/2
varSev^1/2
sd(pardata$sev)
meanSev
sdSev <- sd(pardata$sev)
scale <- (sdSev^2)/meanSev
shape <- meanSev/scale
lambda <- mean(pardata$claim)
N <- 25000
TotalLossLoop <- numeric(N)
for (i in 1:N) {
claims <- rpois(1,lambda)
losses <- rgamma(claims,shape,scale)
TotalLossLoop[i] <- sum(losses)
}
summary(TotalLossLoop)
shape
scale
sdSev
varSev^.5
losses
scale
shape
scale/shape
clm <- rgamma(25, shape = 2, scale = 5000)
summary(clm)
clm <- rgamma(25, shape = 5, scale = 9200)
summary(clm)
TotalLossLoop <- numeric(N)
for (i in 1:N) {
claims <- rpois(1,lambda)
losses <- rgamma(claims,shape=shape,scale=scale)
TotalLossLoop[i] <- sum(losses)
}
summary(TotalLossLoop)
print(mean(TotalLossLoop))
?quantile
quantile(TotalLossLoop,probs=seq(.9,1,.01))
View(pardata)
View(yearLR)
#Filter data for years wanted
pardata <- select(yearLR, c("incurred","claim","exp","sev","freq"))
pardata <- pardata[1:7,]
summary(pardata$incurred)
xolRloss <- sapply(TotalLossLoop, function(x) median(c(0, x - 250000, 1000000 - 250000)))
summary(xolRloss)
rpois(1,lambda)
rpois(1,lambda)
losses
View(claimtbl2)
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/Simulation.R', echo=TRUE)
summary(XOLlossLoop)
losses
summary(claimtbl2$incurred)
summary(claimtbl2$RLossXOL)
mean(TotalLossLoop)
sum(claimtbl_train$RLossXOL)
XOLcost <- RPxol*sum(policytbl_test$exposure)
XOLcost
RNet2
RNet2 <- XOL2 - XOLcost      #Reinsurer's profit or loss
XOL2 <- sum(claimtbl_train$RLossXOL)
RNet2 <- XOL2 - XOLcost      #Reinsurer's profit or loss
RNet2
RNet2 <- XOLcost - XOL2      #Reinsurer's profit or loss
RNet2
Calculate Loss Ratios by policy year for tranche 2
polclaim_train <- left_join(policytbl_train,claimtbl_train,by="policykey")
polclaim_train$paid[is.na(polclaim_train$paid)] <- 0
polclaim_train$incurred[is.na(polclaim_train$incurred)] <- 0
yearLR_train <- polclaim_train %>% group_by(py) %>% summarise(incurred=sum(incurred),
prem=sum(writtenpremium),claim=sum(numclaims),exp=sum(exposure)) %>%
mutate(LR=incurred/prem,sev=incurred/claim,freq=claim/exp)
#Reinurance payment for tranche 2
yearLR_train$asl <- with(yearLR_train, ifelse(LR<=0.4,0,ifelse(LR<0.7,(LR-0.4)*incurred,0.3*incurred)))
View(yearLR_train)
RxolNet2 <- XOLcost - XOL2      #Reinsurer's profit or loss
ASL2 <- sum(yearLR_train$asl)
RaslNet2 <- ASLcost-ASL2
RaslNet2
#Tranche 3
XOL3 <- sum(claimtbl_validate$RLossXOL)
RxolNet3 <- XOLcost - XOL3      #Reinsurer's profit or loss for XOL
#Calculate Loss Ratios by policy year for tranche 3
polclaim_validate <- left_join(policytbl_validate,claimtbl_validate,by="policykey")
polclaim_validate$paid[is.na(polclaim_validate$paid)] <- 0
polclaim_validate$incurred[is.na(polclaim_validate$incurred)] <- 0
yearLR_validate <- polclaim_validate %>% group_by(py) %>% summarise(incurred=sum(incurred),
prem=sum(writtenpremium),claim=sum(numclaims),exp=sum(exposure)) %>%
mutate(LR=incurred/prem,sev=incurred/claim,freq=claim/exp)
#Reinurance payment for tranche 2
yearLR_validate$asl <- with(yearLR_validate, ifelse(LR<=0.4,0,ifelse(LR<0.7,(LR-0.4)*incurred,0.3*incurred)))
ASL3 <- sum(yearLR_validate$asl)
RaslNet3 <- ASLcost-ASL3
RxolNet3
RaslNet3
XOLres <- c(RxolNet2,RxolNet3)
ASLres <- c(RaslNet2,RaslNet3)
Results <- cbind(XOLres, ASLres)
Results
?row.names
row.names(Results) <- c("Tranche 2", "Tranche 3")
Results
source('~/Downloads/mean.py.wp.r', echo=TRUE)
mean.py.wp(policytbl)
View(Results)
sum(claimtbl2$incurred)
mean(claimtbl2$incurred)
View(yearLR)
source('~/Downloads/mean.py.wp.r', echo=TRUE)
mean.py.inc(claimtbl)
View(claimtbl)
View(claimtbl2)
source('~/Downloads/mean.py.wp.r', echo=TRUE)
mean.py.inc(claimtbl2)
5.08/8.3
.81/13.84
.42/6.19
8.3-5.08
13.84-.81
6.19-.42
.92*33
33-30.36
.08*33
sum(losses)
12.25/31.97
source('~/Documents/RBootcamp/Measuring Value in Reinsurance - RCapstone - GV version/Simulation.R', echo=TRUE)
mean(TotalLossLoop)
mean(XOLlossLoop)
summary(TotalLossLoop)
library(dplyr)
?left_join
setwd("~/Documents/class/Reproducible_Research")
data <- read.csv(activity.csv)
data <- read.csv("activity.csv")
str(data)
summary(data$interval)
data$date<- as.Date(data$date)
total <- with(data, tapply(steps, date, sum))
total
total2 <- na.rm(total)
total2 <- total[na.rm=TRUE]
total2
rm(total2)
total2 <- total[,na.rm=TRUE]
total2 <- total[na.rm=TRUE,]
data2 <- data[!is.na(date)]
data2 <- data[!is.na(data$date)]
data2 <- data[!is.na(data)]
data2 <- data[!is.na(data),]
data2 <- data[!is.na(data$date),]
data2 <- data[complete.cases(data),]
total <- with(data2, tapply(steps, date, sum))
total
hist(total)
hist(total, breaks=25)
hist(total, breaks=20)
hist(total, breaks=10)
hist(total, breaks=10, main="Total Daily Steps per Day")
mean(total)
median(total)
interval <- with(data2, tapply(steps, interval, mean))
rm(total)
library(ggplot2)
plot(interval, type="l")
daily <- with(data2, tapply(steps, date, sum))
hist(daily, breaks=10, main="Total Daily Steps per Day")
mean(daily)
median(daily)
hist(daily, breaks=10, main="Total Daily Steps per Day")
interval[which.max(interval),]
interval[which.max(interval)]
dim(data)-dim(data2)
nrow(data)-nrow(data2)
View(data)
sum(is.na(data$steps))
data3<- data
bad<- is.na(data3$steps)
avg_interval<- tapply(data3$steps, data3$interval, mean, na.rm=TRUE, simplify=TRUE)
data3$steps[bad] <- avg_interval[as.character(data3$interval[bad])]
sum(is.na(data3))
?weekdays
weekdays(data3[1,2])
weekdays(data3[150,2])
weekdays(data3[1500,2])
data3$type <- ifelse(weekdays(data3$date)=="Saturday"|weekdays(data3$date)=="Sunday","weekend","weekday")
str(data3)
data3$type <- as.factor(data3$type)
str(data3)
View(data3)
library(dplyr)
interval2<- data3%>%group_by(interval,type)%>%summarise(avgStep = mean(steps))
